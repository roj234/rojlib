# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure CMake
        working-directory: ${{github.workspace}}/libcpp
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: mkdir bin && cd bin && cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build LibCpp
        working-directory: ${{github.workspace}}/libcpp/bin
        # Build your program with the given configuration
        run: cmake --build . --config ${{env.BUILD_TYPE}}

      - uses: actions/upload-artifact@v4
        with:
          name: libcpp.dll
          path: ${{github.workspace}}/libcpp/bin/Release/cpp.dll

      - name: Copy libcpp
        run: copy ${{github.workspace}}/libcpp/bin/Release/cpp.dll ${{github.workspace}}/resources/libcpp.dll

      - name: Compile Java
        working-directory: ${{github.workspace}}/.tools
        run: java -D"file.encoding"=UTF-8 -cp builder.jar roj.asmx.launcher.EntryPoint -- roj.mod.FMDMain build

      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: ${{github.workspace}}/.tools/tmp

      - name: Test
        working-directory: ${{github.workspace}}/libcpp/bin
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}